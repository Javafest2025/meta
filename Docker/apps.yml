services:
  # 1. Service Registry (First - Eureka)
  service-registry:
    build:
      context: ../Microservices/service-registry
      dockerfile: Dockerfile
    container_name: scholar-service-registry
    restart: unless-stopped
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://localhost:8761/eureka/
    networks:
      - scholarai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on: []

  # 2. API Gateway (Second - After Service Registry)
  api-gateway:
    build:
      context: ../Microservices/api-gateway
      dockerfile: Dockerfile
    container_name: scholar-api-gateway
    restart: unless-stopped
    ports:
      - "8989:8989"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://service-registry:8761/eureka/
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://service-registry:8761/eureka/
      - eureka.client.service-url.defaultZone=http://service-registry:8761/eureka/
      - SPRING_APPLICATION_NAME=api-gateway
      - spring.application.name=api-gateway
    networks:
      - scholarai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8989/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      - service-registry

  # 3. Notification Service (Third)
  notification-service:
    build:
      context: ../Microservices/notification-service
      dockerfile: Dockerfile
    container_name: scholar-notification-service
    restart: unless-stopped
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://service-registry:8761/eureka/
      - SPRING_RABBITMQ_HOST=user-rabbitmq
      - SPRING_RABBITMQ_PORT=${RABBITMQ_PORT}
      - SPRING_RABBITMQ_USERNAME=${RABBITMQ_USER}
      - SPRING_RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - NOTIFICATION_DB_PORT=${NOTIFICATION_DB_PORT}
      - NOTIFICATION_DB_USER=${NOTIFICATION_DB_USER}
      - NOTIFICATION_DB_PASSWORD=${NOTIFICATION_DB_PASSWORD}
      - GMAIL_ADDRESS=${GMAIL_ADDRESS}
      - GMAIL_APP_PASSWORD=${GMAIL_APP_PASSWORD}
    networks:
      - scholarai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      - service-registry

  # 4. Project Service (Fourth)
  project-service:
    build:
      context: ../Microservices/project-service
      dockerfile: Dockerfile
    container_name: scholar-project-service
    restart: unless-stopped
    ports:
      - "8083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://service-registry:8761/eureka/
      - RABBITMQ_HOST=user-rabbitmq
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - PROJECT_DB_PORT=${PROJECT_DB_PORT}
      - PROJECT_DB_USER=${PROJECT_DB_USER}
      - PROJECT_DB_PASSWORD=${PROJECT_DB_PASSWORD}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
    networks:
      - scholarai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      - service-registry

  # 5. User Service (Fifth)
  user-service:
    build:
      context: ../Microservices/user-service
      dockerfile: Dockerfile
    container_name: scholar-user-service
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://service-registry:8761/eureka/
      - RABBITMQ_HOST=user-rabbitmq
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - USER_DB_PORT=${USER_DB_PORT}
      - USER_DB_USER=${USER_DB_USER}
      - USER_DB_PASSWORD=${USER_DB_PASSWORD}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - USER_NAME=${USER_NAME}
      - USER_PASSWORD=${USER_PASSWORD}
      - JWT_ACCESS_EXPIRATION_MS=${JWT_ACCESS_EXPIRATION_MS}
      - JWT_REFRESH_EXPIRATION_MS=${JWT_REFRESH_EXPIRATION_MS}
      - SPRING_GOOGLE_CLIENT_ID=${SPRING_GOOGLE_CLIENT_ID}
      - SPRING_GOOGLE_CLIENT_SECRET=${SPRING_GOOGLE_CLIENT_SECRET}
      - SPRING_GITHUB_CLIENT_ID=${SPRING_GITHUB_CLIENT_ID}
      - SPRING_GITHUB_CLIENT_SECRET=${SPRING_GITHUB_CLIENT_SECRET}
      - B2_ENDPOINT=${B2_ENDPOINT}
      - B2_KEY_ID=${B2_KEY_ID}
      - B2_APPLICATION_KEY=${B2_APPLICATION_KEY}
      - B2_BUCKET_NAME=${B2_BUCKET_NAME}
      - B2_BUCKET_ID=${B2_BUCKET_ID}
      - PUBLIC_CDN_BASE=${PUBLIC_CDN_BASE}
      - CLOUDINARY_URL=${CLOUDINARY_URL}
    networks:
      - scholarai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      - service-registry

  # 6. Paper Search Service (Sixth)
  paper-search:
    build:
      context: ../AI-Agents/paper-search
      dockerfile: Dockerfile
    container_name: scholar-paper-search
    restart: unless-stopped
    ports:
      - "8001:8001"
    environment:
      - API_HOST=0.0.0.0
      - API_PORT=8001
      - DEBUG=${DEBUG:-False}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - RABBITMQ_HOST=user-rabbitmq
      - RABBITMQ_PORT=${USER_RABBITMQ_AMQP_PORT}
      - RABBITMQ_USER=${USER_RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${USER_RABBITMQ_PASSWORD}
      - CORE_API_KEY=${CORE_API_KEY}
      - UNPAYWALL_EMAIL=${UNPAYWALL_EMAIL}
      - B2_KEY_ID=${B2_KEY_ID}
      - B2_APPLICATION_KEY=${B2_APPLICATION_KEY}
      - B2_BUCKET_NAME=${B2_BUCKET_NAME}
      - B2_BUCKET_ID=${B2_BUCKET_ID}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
    networks:
      - scholarai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      - service-registry

  # 7. PDF Extractor Service (Seventh)
  extractor:
    build:
      context: ../AI-Agents/extractor
      dockerfile: Dockerfile
    container_name: scholar-extractor
    restart: unless-stopped
    ports:
      - "8002:8002"
    environment:
      - API_HOST=0.0.0.0
      - API_PORT=8002
      - DEBUG=${DEBUG:-False}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - RABBITMQ_HOST=user-rabbitmq
      - RABBITMQ_PORT=${USER_RABBITMQ_AMQP_PORT}
      - RABBITMQ_USER=${USER_RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${USER_RABBITMQ_PASSWORD}
      - GROBID_URL=http://pdf_extractor_grobid:8070
      - REDIS_URL=redis://user-redis:6379/0
      - B2_KEY_ID=${B2_KEY_ID}
      - B2_APPLICATION_KEY=${B2_APPLICATION_KEY}
      - B2_BUCKET_NAME=${B2_BUCKET_NAME}
      - B2_BUCKET_ID=${B2_BUCKET_ID}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - CLOUDINARY_URL=${CLOUDINARY_URL}
      - HF_HOME=/app/cache/huggingface
      - TORCH_HOME=/app/cache/torch
      - OMP_NUM_THREADS=1
      - MKL_NUM_THREADS=1
      - NUMEXPR_NUM_THREADS=1
      - OPENBLAS_NUM_THREADS=1
      - VECLIB_MAXIMUM_THREADS=1
      - BLAS_NUM_THREADS=1
      - LAPACK_NUM_THREADS=1
      - MALLOC_ARENA_MAX=2
      - PYTHONUNBUFFERED=1
    volumes:
      - ../AI-Agents/extractor/paper:/app/paper
      - ../AI-Agents/extractor/logs:/app/logs
      - ../AI-Agents/extractor/cache:/app/cache
      - ../AI-Agents/extractor/uploads:/app/uploads
    networks:
      - scholarai-network
    cpus: 0.75
    mem_limit: 768m
    mem_reservation: 512m
    memswap_limit: 1g
    pids_limit: 128
    shm_size: "128m"
    ulimits:
      nofile:
        soft: 16384
        hard: 16384
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      - service-registry

  # 8. Frontend (Last - After all backend services)
  frontend:
    build:
      context: ../Frontend
      dockerfile: Dockerfile
    container_name: scholar-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_DEV_API_URL=${NEXT_PUBLIC_DEV_API_URL}
      - NEXT_PUBLIC_DOCKER_BACKEND_URL=${NEXT_PUBLIC_DOCKER_BACKEND_URL}
      - NEXT_PUBLIC_API_BASE_URL=${NEXT_PUBLIC_API_BASE_URL}
      - NEXT_PUBLIC_GOOGLE_CLIENT_ID=${NEXT_PUBLIC_GOOGLE_CLIENT_ID}
      - NEXT_PUBLIC_GITHUB_CLIENT_ID=${NEXT_PUBLIC_GITHUB_CLIENT_ID}
      - NEXT_PUBLIC_ENV=${NEXT_PUBLIC_ENV}
      - B2_KEY_ID=${B2_KEY_ID}
      - B2_APPLICATION_KEY=${B2_APPLICATION_KEY}
      - B2_BUCKET_NAME=${B2_BUCKET_NAME}
      - B2_BUCKET_ID=${B2_BUCKET_ID}
    networks:
      - scholarai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      - api-gateway
      - notification-service
      - project-service
      - user-service
      - paper-search
      - extractor

networks:
  scholarai-network:
    external: true
    name: docker_scholarai-network
